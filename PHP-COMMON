


00. What is an array? Index vs Associateive vs Multi-Dimentional Array?
01. $data=["Red", "Green", "Blue", "Brown"]; How will you print all data in this array?

02. Class vs Object.
03. _Contructor() vs _Destructor().
04. What is Access Modifiers(Public, Private, Protected)?
05. What are Abstract(পৃথক) Classes and Methods?

06. What are Interfaces?
07. What are Traits?
08. What is Namespace?



====================== 00 and  01 Array==================================
Array:--- 
Special type variable that can hold multiple data.

Index:----
$data=["Red", "Green", "Blue", "Brown"];     
$cars[0] = "Red";

Associative:----
$age = ["Peter"=>"35", "Ben"=>"37", "Joe"=>"43"];
foreach($age as $d){
echo $d ."</br>";
}

Multi-Dimentional:----
$cars = [ ["Volvo","Red",18], ["BMW","Ash",13], ["Saab","Blue",2]  ];  
for ($row = 0; $row < 3; $row++) {
  echo "<p><b>Row number $row</b></p>";
  echo "<ul>";
  for ($col = 0; $col < 3; $col++) {
    echo "<li>".$cars[$row][$col]."</li>";
  }
  echo "</ul>";
}


================ 02. Class vs Object  ==============
A CLASS is a template for objects, 
An OBJECT is an instance of class.

================ 03. _Contructor() vs _Destructor()  ==============
A constructor allows you to initialize an object's properties upon creation of the object.
A destructor is called when the object is destructed or the script is stopped or exited.
Example:-----------
    <?php
      class Fruit {
        // Properties
        var $name;
        var $color;
        // Methods
        function __construct($name, $color) {
          $this->name = $name;
          $this->color = $color; 
        }
        function __destruct() {
          echo "The fruit is {$this->name} and the color is {$this->color}."; 
        }
      }
      $apple = new Fruit("APPLE", "RED");
    ?>
Result:-------------
The fruit is APPLE and the color is RED.


==================== 04. What is Access Modifiers(Public, Private, Protected)  =============================

public - the property or method can be accessed from everywhere. This is default
protected - the property or method can be accessed within the class and by classes derived from that class
private - the property or method can ONLY be accessed within the class

      <?php
      class Fruit {
        public $name;
        protected $color;
        private $weight;
      }
      $mango = new Fruit();
      $mango->name = 'Mango'; // OK
      $mango->color = 'Yellow'; // ERROR
      $mango->weight = '300'; // ERROR
      ?>


==================== 05. What are Abstract(পৃথক) Classes and Methods? =============================

Abstract classes and methods are when the parent class has a named method, but need its child class(es) to fill out the tasks.
<?php

      // Parent class
      abstract class Car {
        public $name;
        public function __construct($name) {
          $this->name = $name;
        }
        abstract public function intro() : string;
      }
      
      // Child classes
      class Audi extends Car {
        public function intro() : string {
          return "Choose German quality! I'm an $this->name!";
        }
      }
// Create objects from the child classes
$audi = new audi("Audi");
echo $audi->intro();
echo "<br>";
?>

================================06. What are Interfaces? ========================================

Interfaces allow you to specify what methods a class should implement.
<?php
    interface Animal {
      public function makeSound();
    }
    class Cat implements Animal {
      public function makeSound() {
        echo "Meow";
      }
    } 
    $animal = new Cat();
    $animal->makeSound();
?>

Example
<?php
// Interface definition
interface Animal {
  public function makeSound();
}
// Class definitions
class Cat implements Animal {
  public function makeSound() {
    echo " Meow ";
  }
}

class Dog implements Animal {
  public function makeSound() {
    echo " Bark ";
  }
}

class Mouse implements Animal {
  public function makeSound() {
    echo " Squeak ";
  }
}

// Create a list of animals
$cat = new Cat();
$dog = new Dog();
$mouse = new Mouse();
$animals = array($cat, $dog, $mouse);

// Tell the animals to make a sound
foreach($animals as $animal) {
  $animal->makeSound();
}
?>

================================07.  What are Traits?========================================

PHP only supports single inheritance: a child class can inherit only from one single parent.

Example:---
<?php
      trait message1 {
      public function msg1() {
          echo "OOP is fun! ";
        }
      }
      
      class Welcome {
        use message1;
      }
      
      $obj = new Welcome();
      $obj->msg1();
?>


=============================08. Namespaces ============================================

Namespaces are qualifiers that solve two different problems:
  They allow for better organization by grouping classes that work together to perform a task
  They allow the same name to be used for more than one class
Example:--------
      <?php
      namespace Html;
      class Table {
        public $title = "";
        public $numRows = 0;
        public function message() {
          echo "<p>Table '{$this->title}' has {$this->numRows} rows.</p>";
        }
      }
      $table = new Table();
      $table->title = "My table";
      $table->numRows = 5;
      ?>
      
      <!DOCTYPE html>
      <html>
      <body>
      
      <?php
      $table->message();
      ?>
      
      </body>
      </html>






